//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zelda.Editor.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Zelda.Editor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ActionSheet ähnelt.
        /// </summary>
        public static string AssetPath_ActionSheet {
            get {
                return ResourceManager.GetString("AssetPath_ActionSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add BGM ähnelt.
        /// </summary>
        public static string ButtonText_AddBackgroundMusic {
            get {
                return ResourceManager.GetString("ButtonText_AddBackgroundMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add Event ähnelt.
        /// </summary>
        public static string ButtonText_AddEvent {
            get {
                return ResourceManager.GetString("ButtonText_AddEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add Event Trigger ähnelt.
        /// </summary>
        public static string ButtonText_AddEventTrigger {
            get {
                return ResourceManager.GetString("ButtonText_AddEventTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add Floor ähnelt.
        /// </summary>
        public static string ButtonText_AddFloor {
            get {
                return ResourceManager.GetString("ButtonText_AddFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add Layer ähnelt.
        /// </summary>
        public static string ButtonText_AddLayer {
            get {
                return ResourceManager.GetString("ButtonText_AddLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string ButtonText_Cancel {
            get {
                return ResourceManager.GetString("ButtonText_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fill Layer ähnelt.
        /// </summary>
        public static string ButtonText_FillLayer {
            get {
                return ResourceManager.GetString("ButtonText_FillLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move Down ähnelt.
        /// </summary>
        public static string ButtonText_MoveFloorDown {
            get {
                return ResourceManager.GetString("ButtonText_MoveFloorDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move Up ähnelt.
        /// </summary>
        public static string ButtonText_MoveFloorUp {
            get {
                return ResourceManager.GetString("ButtonText_MoveFloorUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move Down ähnelt.
        /// </summary>
        public static string ButtonText_MoveLayerDown {
            get {
                return ResourceManager.GetString("ButtonText_MoveLayerDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move Up ähnelt.
        /// </summary>
        public static string ButtonText_MoveLayerUp {
            get {
                return ResourceManager.GetString("ButtonText_MoveLayerUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move To ähnelt.
        /// </summary>
        public static string ButtonText_MoveToObject {
            get {
                return ResourceManager.GetString("ButtonText_MoveToObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Object ähnelt.
        /// </summary>
        public static string ButtonText_NewObject {
            get {
                return ResourceManager.GetString("ButtonText_NewObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die OK ähnelt.
        /// </summary>
        public static string ButtonText_OK {
            get {
                return ResourceManager.GetString("ButtonText_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove BGM ähnelt.
        /// </summary>
        public static string ButtonText_RemoveBackgroundMusic {
            get {
                return ResourceManager.GetString("ButtonText_RemoveBackgroundMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove Floor ähnelt.
        /// </summary>
        public static string ButtonText_RemoveFloor {
            get {
                return ResourceManager.GetString("ButtonText_RemoveFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove Layer ähnelt.
        /// </summary>
        public static string ButtonText_RemoveLayer {
            get {
                return ResourceManager.GetString("ButtonText_RemoveLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set Sheet ähnelt.
        /// </summary>
        public static string ButtonText_SetSpriteSheet {
            get {
                return ResourceManager.GetString("ButtonText_SetSpriteSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the music tracks to add to the Scene. ähnelt.
        /// </summary>
        public static string DialogTitle_AddBackgroundMusic {
            get {
                return ResourceManager.GetString("DialogTitle_AddBackgroundMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the type of the Entity. ähnelt.
        /// </summary>
        public static string DialogTitle_EntityTypeSelection {
            get {
                return ResourceManager.GetString("DialogTitle_EntityTypeSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Scene ähnelt.
        /// </summary>
        public static string DialogTitle_NewScene {
            get {
                return ResourceManager.GetString("DialogTitle_NewScene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Scene to open. ähnelt.
        /// </summary>
        public static string DialogTitle_OpenScene {
            get {
                return ResourceManager.GetString("DialogTitle_OpenScene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the entity template to use. ähnelt.
        /// </summary>
        public static string DialogTitle_SelectEntityTemplate {
            get {
                return ResourceManager.GetString("DialogTitle_SelectEntityTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Item Resource to use. ähnelt.
        /// </summary>
        public static string DialogTitle_SelectItem {
            get {
                return ResourceManager.GetString("DialogTitle_SelectItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select a Quest Definition File. ähnelt.
        /// </summary>
        public static string DialogTitle_SelectQuest {
            get {
                return ResourceManager.GetString("DialogTitle_SelectQuest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select a Sprite resource. ähnelt.
        /// </summary>
        public static string DialogTitle_SelectSprite {
            get {
                return ResourceManager.GetString("DialogTitle_SelectSprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select a SpriteSheet resource. ähnelt.
        /// </summary>
        public static string DialogTitle_SetSheet {
            get {
                return ResourceManager.GetString("DialogTitle_SetSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The action layer of the floor is null. An action layer is required. ähnelt.
        /// </summary>
        public static string Error_ActionLayerOfFloorIsNull {
            get {
                return ResourceManager.GetString("Error_ActionLayerOfFloorIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given TileMapFloor is not part of this TileMap. This is required. ähnelt.
        /// </summary>
        public static string Error_GivenFloorIsNotPartOfTileMap {
            get {
                return ResourceManager.GetString("Error_GivenFloorIsNotPartOfTileMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given TileMapDataLayer is not an action layer. This is required. ähnelt.
        /// </summary>
        public static string Error_GivenLayerIsNoActionLayer {
            get {
                return ResourceManager.GetString("Error_GivenLayerIsNoActionLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The given TileMapSpriteDataLayer is not part of this TileMapFloor. This is required. ähnelt.
        /// </summary>
        public static string Error_GivenLayerIsNotPartOfFloor {
            get {
                return ResourceManager.GetString("Error_GivenLayerIsNotPartOfFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name is required to be unique. ähnelt.
        /// </summary>
        public static string Error_NameMustBeUnique {
            get {
                return ResourceManager.GetString("Error_NameMustBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There already exists an entity with the name &apos;{0}&apos;. Names must be unique. ähnelt.
        /// </summary>
        public static string Error_ThereAlreadyExistsEntityWithNameX {
            get {
                return ResourceManager.GetString("Error_ThereAlreadyExistsEntityWithNameX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Editor&apos;s Log.log ähnelt.
        /// </summary>
        public static string FileLogName {
            get {
                return ResourceManager.GetString("FileLogName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item Resources (*.zitm)|*.zitm ähnelt.
        /// </summary>
        public static string Filter_ItemResources {
            get {
                return ResourceManager.GetString("Filter_ItemResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quest Resources (*.zq)|*.zq ähnelt.
        /// </summary>
        public static string Filter_QuestResources {
            get {
                return ResourceManager.GetString("Filter_QuestResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene Files (*.zs)|*.zs ähnelt.
        /// </summary>
        public static string Filter_Scene {
            get {
                return ResourceManager.GetString("Filter_Scene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SpriteSheet Resources (*.sprsh)|*.sprsh ähnelt.
        /// </summary>
        public static string Filter_SpriteSheet {
            get {
                return ResourceManager.GetString("Filter_SpriteSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor &apos;{0}&apos; ähnelt.
        /// </summary>
        public static string Format_FloorNameIndexX {
            get {
                return ResourceManager.GetString("Format_FloorNameIndexX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Selected Object ähnelt.
        /// </summary>
        public static string Headline_SelecteObject {
            get {
                return ResourceManager.GetString("Headline_SelecteObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All fields are required to have an value. ähnelt.
        /// </summary>
        public static string Info_AllFieldsRequired {
            get {
                return ResourceManager.GetString("Info_AllFieldsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Height must be greater than {0}. ähnelt.
        /// </summary>
        public static string Info_HeightMustBeGreaterThanX {
            get {
                return ResourceManager.GetString("Info_HeightMustBeGreaterThanX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene &apos;{0}&apos; has been successfully saved. ähnelt.
        /// </summary>
        public static string Info_SceneXSaved {
            get {
                return ResourceManager.GetString("Info_SceneXSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The entity {0} can&apos;t be manually removed from the scene. ähnelt.
        /// </summary>
        public static string Info_TheEntityXCantBeRemoved {
            get {
                return ResourceManager.GetString("Info_TheEntityXCantBeRemoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Width must be greater than {0}. ähnelt.
        /// </summary>
        public static string Info_WidthMustBeGreaterThanX {
            get {
                return ResourceManager.GetString("Info_WidthMustBeGreaterThanX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ambient Color ähnelt.
        /// </summary>
        public static string Label_AmbientColor {
            get {
                return ResourceManager.GetString("Label_AmbientColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background Music ähnelt.
        /// </summary>
        public static string Label_BackgroundMusic {
            get {
                return ResourceManager.GetString("Label_BackgroundMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Properties ähnelt.
        /// </summary>
        public static string Label_EventProperties {
            get {
                return ResourceManager.GetString("Label_EventProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Events ähnelt.
        /// </summary>
        public static string Label_Events {
            get {
                return ResourceManager.GetString("Label_Events", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Triggers ähnelt.
        /// </summary>
        public static string Label_EventTriggers {
            get {
                return ResourceManager.GetString("Label_EventTriggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor Count: ähnelt.
        /// </summary>
        public static string Label_FloorCount {
            get {
                return ResourceManager.GetString("Label_FloorCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die FLOORS ähnelt.
        /// </summary>
        public static string Label_Floors {
            get {
                return ResourceManager.GetString("Label_Floors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Incident Properties ähnelt.
        /// </summary>
        public static string Label_IncidentProperties {
            get {
                return ResourceManager.GetString("Label_IncidentProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Incidents ähnelt.
        /// </summary>
        public static string Label_Incidents {
            get {
                return ResourceManager.GetString("Label_Incidents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name: ähnelt.
        /// </summary>
        public static string Label_LayerName {
            get {
                return ResourceManager.GetString("Label_LayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die LAYER SETTINGS ähnelt.
        /// </summary>
        public static string Label_LayerSettings {
            get {
                return ResourceManager.GetString("Label_LayerSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite Sheet: ähnelt.
        /// </summary>
        public static string Label_LayerSpriteSheet {
            get {
                return ResourceManager.GetString("Label_LayerSpriteSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type: ähnelt.
        /// </summary>
        public static string Label_LayerType {
            get {
                return ResourceManager.GetString("Label_LayerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Visible: ähnelt.
        /// </summary>
        public static string Label_LayerVisability {
            get {
                return ResourceManager.GetString("Label_LayerVisability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Paths ähnelt.
        /// </summary>
        public static string Label_Paths {
            get {
                return ResourceManager.GetString("Label_Paths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Path Segments ähnelt.
        /// </summary>
        public static string Label_PathSegments {
            get {
                return ResourceManager.GetString("Label_PathSegments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Properties ähnelt.
        /// </summary>
        public static string Label_Properties {
            get {
                return ResourceManager.GetString("Label_Properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Height: ähnelt.
        /// </summary>
        public static string Label_SceneHeight {
            get {
                return ResourceManager.GetString("Label_SceneHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name: ähnelt.
        /// </summary>
        public static string Label_SceneName {
            get {
                return ResourceManager.GetString("Label_SceneName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene Name ähnelt.
        /// </summary>
        public static string Label_SceneName_Large {
            get {
                return ResourceManager.GetString("Label_SceneName_Large", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene Type ähnelt.
        /// </summary>
        public static string Label_SceneType {
            get {
                return ResourceManager.GetString("Label_SceneType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Width: ähnelt.
        /// </summary>
        public static string Label_SceneWidth {
            get {
                return ResourceManager.GetString("Label_SceneWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SPRITE LAYERS ähnelt.
        /// </summary>
        public static string Label_SpriteLayers {
            get {
                return ResourceManager.GetString("Label_SpriteLayers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timeline Properties ähnelt.
        /// </summary>
        public static string Label_TimelineProperties {
            get {
                return ResourceManager.GetString("Label_TimelineProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timelines ähnelt.
        /// </summary>
        public static string Label_Timelines {
            get {
                return ResourceManager.GetString("Label_Timelines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Waypoints ähnelt.
        /// </summary>
        public static string Label_Waypoints {
            get {
                return ResourceManager.GetString("Label_Waypoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File ähnelt.
        /// </summary>
        public static string MenuHeader_File {
            get {
                return ResourceManager.GetString("MenuHeader_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Close Scene ähnelt.
        /// </summary>
        public static string MenuHeader_File_Close {
            get {
                return ResourceManager.GetString("MenuHeader_File_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exit ähnelt.
        /// </summary>
        public static string MenuHeader_File_Exit {
            get {
                return ResourceManager.GetString("MenuHeader_File_Exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Scene ähnelt.
        /// </summary>
        public static string MenuHeader_File_New {
            get {
                return ResourceManager.GetString("MenuHeader_File_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open Scene ähnelt.
        /// </summary>
        public static string MenuHeader_File_Open {
            get {
                return ResourceManager.GetString("MenuHeader_File_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save Scene ähnelt.
        /// </summary>
        public static string MenuHeader_File_Save {
            get {
                return ResourceManager.GetString("MenuHeader_File_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Help ähnelt.
        /// </summary>
        public static string MenuHeader_Help {
            get {
                return ResourceManager.GetString("MenuHeader_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die View ähnelt.
        /// </summary>
        public static string MenuHeader_View {
            get {
                return ResourceManager.GetString("MenuHeader_View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die }null sprite{ ähnelt.
        /// </summary>
        public static string NullSprite {
            get {
                return ResourceManager.GetString("NullSprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collision ähnelt.
        /// </summary>
        public static string PropCate_Collision {
            get {
                return ResourceManager.GetString("PropCate_Collision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Draw Settings ähnelt.
        /// </summary>
        public static string PropCate_DrawSettings {
            get {
                return ResourceManager.GetString("PropCate_DrawSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Events ähnelt.
        /// </summary>
        public static string PropCate_Events {
            get {
                return ResourceManager.GetString("PropCate_Events", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Identification ähnelt.
        /// </summary>
        public static string PropCate_Identification {
            get {
                return ResourceManager.GetString("PropCate_Identification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Light Settings ähnelt.
        /// </summary>
        public static string PropCate_LightSettings {
            get {
                return ResourceManager.GetString("PropCate_LightSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Settings ähnelt.
        /// </summary>
        public static string PropCate_Settings {
            get {
                return ResourceManager.GetString("PropCate_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound Settings ähnelt.
        /// </summary>
        public static string PropCate_SoundSettings {
            get {
                return ResourceManager.GetString("PropCate_SoundSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Transformation ähnelt.
        /// </summary>
        public static string PropCate_Transform {
            get {
                return ResourceManager.GetString("PropCate_Transform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Visualization ähnelt.
        /// </summary>
        public static string PropCate_Visuals {
            get {
                return ResourceManager.GetString("PropCate_Visuals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The event that gets executed when the block is triggered. ähnelt.
        /// </summary>
        public static string PropDesc_BlockTrigger_Event {
            get {
                return ResourceManager.GetString("PropDesc_BlockTrigger_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The area in which this entity is considered to collide with other entities. ähnelt.
        /// </summary>
        public static string PropDesc_CollisionArea {
            get {
                return ResourceManager.GetString("PropDesc_CollisionArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Represents the collision area of the Object. ähnelt.
        /// </summary>
        public static string PropDesc_CollisionRectangle {
            get {
                return ResourceManager.GetString("PropDesc_CollisionRectangle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The direction of the entity. ähnelt.
        /// </summary>
        public static string PropDesc_Direction {
            get {
                return ResourceManager.GetString("PropDesc_Direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The object that contains the drawing data and logic for the entity. ähnelt.
        /// </summary>
        public static string PropDesc_DrawDataAndStrategy {
            get {
                return ResourceManager.GetString("PropDesc_DrawDataAndStrategy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The full name of the type that contains the drawing data and logic for the entity. ähnelt.
        /// </summary>
        public static string PropDesc_DrawDataAndStrategyType {
            get {
                return ResourceManager.GetString("PropDesc_DrawDataAndStrategyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The modifier that is applied to the entity. ähnelt.
        /// </summary>
        public static string PropDesc_EntityModifier {
            get {
                return ResourceManager.GetString("PropDesc_EntityModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether there is a Light associated with the FirePlace. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_HasLight {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_HasLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the FirePlace is emitting a sound using a SoundEmitter. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_HasSoundEmitter {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_HasSoundEmitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the player can unlit/lit the FirePlace by using it. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_IsSwitchable {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_IsSwitchable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the FirePlace is currently lit. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_IsSwitched {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_IsSwitched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Light that is associated with the FirePlace. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_Light {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_Light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The positional SoundEmitter that is attached to the FirePlace. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_SoundEmitter {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_SoundEmitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that is shown when the FirePlace is unlit. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_SpriteOff {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_SpriteOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that is shown when the FirePlace is lit. ähnelt.
        /// </summary>
        public static string PropDesc_FirePlace_SpriteOn {
            get {
                return ResourceManager.GetString("PropDesc_FirePlace_SpriteOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of the floor the entity is placed on. ähnelt.
        /// </summary>
        public static string PropDesc_FloorNumber {
            get {
                return ResourceManager.GetString("PropDesc_FloorNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Influences how items on the same floor are sorted on the z-axes. ähnelt.
        /// </summary>
        public static string PropDesc_FloorRelativity {
            get {
                return ResourceManager.GetString("PropDesc_FloorRelativity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the player has to face the entity to use it. ähnelt.
        /// </summary>
        public static string PropDesc_HasToFaceToUse {
            get {
                return ResourceManager.GetString("PropDesc_HasToFaceToUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States  whether the EntitySpawn is active, and should spawn the entity. ähnelt.
        /// </summary>
        public static string PropDesc_IsEntitySpawnActive {
            get {
                return ResourceManager.GetString("PropDesc_IsEntitySpawnActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the persistance of this entity is removed once the player has picked it up. ähnelt.
        /// </summary>
        public static string PropDesc_IsRemovingPersistanceOnPickUp {
            get {
                return ResourceManager.GetString("PropDesc_IsRemovingPersistanceOnPickUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the object completly goes away after it has been unlocked, even if the scene has been reloaded. ähnelt.
        /// </summary>
        public static string PropDesc_IsRemovingPersistanceOnUnlock {
            get {
                return ResourceManager.GetString("PropDesc_IsRemovingPersistanceOnUnlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The color tainting applied to the Light. ähnelt.
        /// </summary>
        public static string PropDesc_LightColor {
            get {
                return ResourceManager.GetString("PropDesc_LightColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that represents the shape, base brightness and base color of the Light. ähnelt.
        /// </summary>
        public static string PropDesc_LightSprite {
            get {
                return ResourceManager.GetString("PropDesc_LightSprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Press to reload the current Draw Data and Strategy. ähnelt.
        /// </summary>
        public static string PropDesc_LoadDrawDataAndStrategyToggle {
            get {
                return ResourceManager.GetString("PropDesc_LoadDrawDataAndStrategyToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The item resource whose instance is placed in the scene. ähnelt.
        /// </summary>
        public static string PropDesc_MapItem {
            get {
                return ResourceManager.GetString("PropDesc_MapItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum number of times the razor entity bounces back and forth before it starts to rest again. ähnelt.
        /// </summary>
        public static string PropDesc_MaximumRazorBounceCount {
            get {
                return ResourceManager.GetString("PropDesc_MaximumRazorBounceCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The (unique) name of the Object. ähnelt.
        /// </summary>
        public static string PropDesc_Name {
            get {
                return ResourceManager.GetString("PropDesc_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The offset from the position of the object to the beginning of the collision area. ähnelt.
        /// </summary>
        public static string PropDesc_Offset {
            get {
                return ResourceManager.GetString("PropDesc_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The position of the Object in the scene. ähnelt.
        /// </summary>
        public static string PropDesc_Position {
            get {
                return ResourceManager.GetString("PropDesc_Position", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The position of the entity in tile-space. ähnelt.
        /// </summary>
        public static string PropDesc_PositionTile {
            get {
                return ResourceManager.GetString("PropDesc_PositionTile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States how the razor entity behaves. ähnelt.
        /// </summary>
        public static string PropDesc_RazorBehaviourType {
            get {
                return ResourceManager.GetString("PropDesc_RazorBehaviourType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that is shown when the trigger is switched off. ähnelt.
        /// </summary>
        public static string PropDesc_RedBlueBlockTrigger_SpriteOff {
            get {
                return ResourceManager.GetString("PropDesc_RedBlueBlockTrigger_SpriteOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that is shown when the trigger is switched on. ähnelt.
        /// </summary>
        public static string PropDesc_RedBlueBlockTrigger_SpriteOn {
            get {
                return ResourceManager.GetString("PropDesc_RedBlueBlockTrigger_SpriteOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The DualSwitchEvent that gets triggered when the player attacks the RedBlueBlockTrigger. ähnelt.
        /// </summary>
        public static string PropDesc_RedBlueBlockTrigger_SwitchEvent {
            get {
                return ResourceManager.GetString("PropDesc_RedBlueBlockTrigger_SwitchEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of EnemyRespawnGroups which determine what and how often Enemies spawn. ähnelt.
        /// </summary>
        public static string PropDesc_RespawnGroups {
            get {
                return ResourceManager.GetString("PropDesc_RespawnGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The rotation of the Object in degrees. ähnelt.
        /// </summary>
        public static string PropDesc_RotationDegree {
            get {
                return ResourceManager.GetString("PropDesc_RotationDegree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the current location of the player is set as the spawn point upon loading the game when he spawn at this spawn point. ähnelt.
        /// </summary>
        public static string PropDesc_SaveLocationAtSpawn {
            get {
                return ResourceManager.GetString("PropDesc_SaveLocationAtSpawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The scaling factor applied to the Object. ähnelt.
        /// </summary>
        public static string PropDesc_Scale {
            get {
                return ResourceManager.GetString("PropDesc_Scale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The size of the object. ähnelt.
        /// </summary>
        public static string PropDesc_Size {
            get {
                return ResourceManager.GetString("PropDesc_Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sound resource. ähnelt.
        /// </summary>
        public static string PropDesc_Sound {
            get {
                return ResourceManager.GetString("PropDesc_Sound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The combined volume of the sound after 3d sound, volume and channel group volume  calculations have been performed on it. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_Audibility {
            get {
                return ResourceManager.GetString("PropDesc_Sound_Audibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum area the sound stops attenuating at. 
        ///Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener and will not attenuate any more. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_MaximumArea {
            get {
                return ResourceManager.GetString("PropDesc_Sound_MaximumArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The offset applied to the Maximum Sound Area. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_MaximumAreaOffset {
            get {
                return ResourceManager.GetString("PropDesc_Sound_MaximumAreaOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum distance the sound stops attenuating at. 
        ///Beyond this point it will stay at the volume it would be at MaximumDistance units from the listener and will not attenuate any more. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_MaximumDistance {
            get {
                return ResourceManager.GetString("PropDesc_Sound_MaximumDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The minimum area that the sound emitter will cease to continue growing louder at (as it approaches the listener). ähnelt.
        /// </summary>
        public static string PropDesc_Sound_MinimumArea {
            get {
                return ResourceManager.GetString("PropDesc_Sound_MinimumArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The minimum distance that the sound emitter will cease to continue growing louder at (as it approaches the listener). ähnelt.
        /// </summary>
        public static string PropDesc_Sound_MinimumDistance {
            get {
                return ResourceManager.GetString("PropDesc_Sound_MinimumDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States how much the 3d engine has an effect on the channel, versus that set by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels.  1 = Sound pans and attenuates according to 3d position. 0 = Attenuation is ignored and pan/speaker levels are defined by Channel::setPan, Channel::setSpeakerMix, Channel::setSpeakerLevels. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_PanLevel3D {
            get {
                return ResourceManager.GetString("PropDesc_Sound_PanLevel3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The time between two triggers of the sound emitter. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_TriggerPeriod {
            get {
                return ResourceManager.GetString("PropDesc_Sound_TriggerPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The volume of the sound; where 0 = silent and 1 = full volumne. ähnelt.
        /// </summary>
        public static string PropDesc_Sound_Volumne {
            get {
                return ResourceManager.GetString("PropDesc_Sound_Volumne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The spawning area. ähnelt.
        /// </summary>
        public static string PropDesc_SpawnArea {
            get {
                return ResourceManager.GetString("PropDesc_SpawnArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The direction the entity is spawning. Setting this value to None makes the entity maintain its original direction ähnelt.
        /// </summary>
        public static string PropDesc_SpawnDirection {
            get {
                return ResourceManager.GetString("PropDesc_SpawnDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite of the entity. ähnelt.
        /// </summary>
        public static string PropDesc_Sprite {
            get {
                return ResourceManager.GetString("PropDesc_Sprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the entity template that is used to create the related Entity. ähnelt.
        /// </summary>
        public static string PropDesc_TemplateName {
            get {
                return ResourceManager.GetString("PropDesc_TemplateName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The unique id that identifies the text resource. ähnelt.
        /// </summary>
        public static string PropDesc_TextResourceId {
            get {
                return ResourceManager.GetString("PropDesc_TextResourceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the TileBlock entity is solid; and as such blocks all moveable entities. ähnelt.
        /// </summary>
        public static string PropDesc_TileBlock_IsSolid {
            get {
                return ResourceManager.GetString("PropDesc_TileBlock_IsSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name that uniquely identifies the type of the object. ähnelt.
        /// </summary>
        public static string PropDesc_TypeName {
            get {
                return ResourceManager.GetString("PropDesc_TypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The event that gets triggered when the player didn&apos;t manage to unlock the door. For example when he was missing the required key. ähnelt.
        /// </summary>
        public static string PropDesc_UnlockableDoor_NotUnlockedEvent {
            get {
                return ResourceManager.GetString("PropDesc_UnlockableDoor_NotUnlockedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the item that is required to unlock the door. ähnelt.
        /// </summary>
        public static string PropDesc_UnlockableDoor_RequiredKeyItemName {
            get {
                return ResourceManager.GetString("PropDesc_UnlockableDoor_RequiredKeyItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The event that gets triggered when the player has unlocked the door. ähnelt.
        /// </summary>
        public static string PropDesc_UnlockableDoor_UnlockedEvent {
            get {
                return ResourceManager.GetString("PropDesc_UnlockableDoor_UnlockedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The action that is executed when the entity is used. ähnelt.
        /// </summary>
        public static string PropDesc_UseAction {
            get {
                return ResourceManager.GetString("PropDesc_UseAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The area in which the entity can be used. ähnelt.
        /// </summary>
        public static string PropDesc_UseArea {
            get {
                return ResourceManager.GetString("PropDesc_UseArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the EntitySpawn should 
        ///clone an template entity to create the entity;
        ///or directly load it from the hard-disc. ähnelt.
        /// </summary>
        public static string PropDesc_UseTemplate {
            get {
                return ResourceManager.GetString("PropDesc_UseTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The text shown when the Player gets no Quest from the Wanted Sign Post. ähnelt.
        /// </summary>
        public static string PropDesc_WantedSignPost_LocalizedText {
            get {
                return ResourceManager.GetString("PropDesc_WantedSignPost_LocalizedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name that uniquely identifies the Quest given by the Wanted Sign Post. ähnelt.
        /// </summary>
        public static string PropDesc_WantedSignPost_QuestName {
            get {
                return ResourceManager.GetString("PropDesc_WantedSignPost_QuestName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Audibility ähnelt.
        /// </summary>
        public static string PropDisp_Audibility {
            get {
                return ResourceManager.GetString("PropDisp_Audibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collision Area ähnelt.
        /// </summary>
        public static string PropDisp_CollisionArea {
            get {
                return ResourceManager.GetString("PropDisp_CollisionArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collision Rectangle ähnelt.
        /// </summary>
        public static string PropDisp_CollisionRectangle {
            get {
                return ResourceManager.GetString("PropDisp_CollisionRectangle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Color ähnelt.
        /// </summary>
        public static string PropDisp_Color {
            get {
                return ResourceManager.GetString("PropDisp_Color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Direction ähnelt.
        /// </summary>
        public static string PropDisp_Direction {
            get {
                return ResourceManager.GetString("PropDisp_Direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Draw Strategy ähnelt.
        /// </summary>
        public static string PropDisp_DrawDataAndStrategy {
            get {
                return ResourceManager.GetString("PropDisp_DrawDataAndStrategy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Draw Strategy Type ähnelt.
        /// </summary>
        public static string PropDisp_DrawDataAndStrategyType {
            get {
                return ResourceManager.GetString("PropDisp_DrawDataAndStrategyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Entity Modifier ähnelt.
        /// </summary>
        public static string PropDisp_EntityModifier {
            get {
                return ResourceManager.GetString("PropDisp_EntityModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Lit/Unlit-able ähnelt.
        /// </summary>
        public static string PropDisp_FirePlace_IsSwitchable {
            get {
                return ResourceManager.GetString("PropDisp_FirePlace_IsSwitchable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Lit ähnelt.
        /// </summary>
        public static string PropDisp_FirePlace_IsSwitched {
            get {
                return ResourceManager.GetString("PropDisp_FirePlace_IsSwitched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor Number ähnelt.
        /// </summary>
        public static string PropDisp_FloorNumber {
            get {
                return ResourceManager.GetString("PropDisp_FloorNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor Relativity ähnelt.
        /// </summary>
        public static string PropDisp_FloorRelativity {
            get {
                return ResourceManager.GetString("PropDisp_FloorRelativity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Has Light ähnelt.
        /// </summary>
        public static string PropDisp_HasLight {
            get {
                return ResourceManager.GetString("PropDisp_HasLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Has Sound Emitter ähnelt.
        /// </summary>
        public static string PropDisp_HasSoundEmitter {
            get {
                return ResourceManager.GetString("PropDisp_HasSoundEmitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Has To Face To Use ähnelt.
        /// </summary>
        public static string PropDisp_HasToFaceToUse {
            get {
                return ResourceManager.GetString("PropDisp_HasToFaceToUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Active ähnelt.
        /// </summary>
        public static string PropDisp_IsActive {
            get {
                return ResourceManager.GetString("PropDisp_IsActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Persistance Removed On Pick-Up ähnelt.
        /// </summary>
        public static string PropDisp_IsRemovingPersistanceOnPickUp {
            get {
                return ResourceManager.GetString("PropDisp_IsRemovingPersistanceOnPickUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove Persistance On Unlock ähnelt.
        /// </summary>
        public static string PropDisp_IsRemovingPersistanceOnUnlock {
            get {
                return ResourceManager.GetString("PropDisp_IsRemovingPersistanceOnUnlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Solid ähnelt.
        /// </summary>
        public static string PropDisp_IsSolid {
            get {
                return ResourceManager.GetString("PropDisp_IsSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Light ähnelt.
        /// </summary>
        public static string PropDisp_Light {
            get {
                return ResourceManager.GetString("PropDisp_Light", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Load Draw Strategy ähnelt.
        /// </summary>
        public static string PropDisp_LoadDrawDataAndStrategyToggle {
            get {
                return ResourceManager.GetString("PropDisp_LoadDrawDataAndStrategyToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Localized Text ähnelt.
        /// </summary>
        public static string PropDisp_LocalizedText {
            get {
                return ResourceManager.GetString("PropDisp_LocalizedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item ähnelt.
        /// </summary>
        public static string PropDisp_MapItem {
            get {
                return ResourceManager.GetString("PropDisp_MapItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maximum Area ähnelt.
        /// </summary>
        public static string PropDisp_MaximumArea {
            get {
                return ResourceManager.GetString("PropDisp_MaximumArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maximum Area Offset ähnelt.
        /// </summary>
        public static string PropDisp_MaximumAreaOffset {
            get {
                return ResourceManager.GetString("PropDisp_MaximumAreaOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Maximum Distance ähnelt.
        /// </summary>
        public static string PropDisp_MaximumDistance {
            get {
                return ResourceManager.GetString("PropDisp_MaximumDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bounce Count ähnelt.
        /// </summary>
        public static string PropDisp_MaximumRazorBounceCount {
            get {
                return ResourceManager.GetString("PropDisp_MaximumRazorBounceCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Minimum Area ähnelt.
        /// </summary>
        public static string PropDisp_MinimumArea {
            get {
                return ResourceManager.GetString("PropDisp_MinimumArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Minimum Distance ähnelt.
        /// </summary>
        public static string PropDisp_MinimumDistance {
            get {
                return ResourceManager.GetString("PropDisp_MinimumDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name ähnelt.
        /// </summary>
        public static string PropDisp_Name {
            get {
                return ResourceManager.GetString("PropDisp_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Offset ähnelt.
        /// </summary>
        public static string PropDisp_Offset {
            get {
                return ResourceManager.GetString("PropDisp_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pan Level 3D ähnelt.
        /// </summary>
        public static string PropDisp_PanLevel3D {
            get {
                return ResourceManager.GetString("PropDisp_PanLevel3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Position ähnelt.
        /// </summary>
        public static string PropDisp_Position {
            get {
                return ResourceManager.GetString("PropDisp_Position", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Position Tile ähnelt.
        /// </summary>
        public static string PropDisp_PositionTile {
            get {
                return ResourceManager.GetString("PropDisp_PositionTile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Behaviour Type ähnelt.
        /// </summary>
        public static string PropDisp_RazorBehaviourType {
            get {
                return ResourceManager.GetString("PropDisp_RazorBehaviourType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Respawn Groups ähnelt.
        /// </summary>
        public static string PropDisp_RespawnGroups {
            get {
                return ResourceManager.GetString("PropDisp_RespawnGroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotation ähnelt.
        /// </summary>
        public static string PropDisp_Rotation {
            get {
                return ResourceManager.GetString("PropDisp_Rotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Saves Location at spawn ähnelt.
        /// </summary>
        public static string PropDisp_SaveLocationAtSpawn {
            get {
                return ResourceManager.GetString("PropDisp_SaveLocationAtSpawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scale ähnelt.
        /// </summary>
        public static string PropDisp_Scale {
            get {
                return ResourceManager.GetString("PropDisp_Scale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Size ähnelt.
        /// </summary>
        public static string PropDisp_Size {
            get {
                return ResourceManager.GetString("PropDisp_Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound ähnelt.
        /// </summary>
        public static string PropDisp_Sound {
            get {
                return ResourceManager.GetString("PropDisp_Sound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound Emitter ähnelt.
        /// </summary>
        public static string PropDisp_SoundEmitter {
            get {
                return ResourceManager.GetString("PropDisp_SoundEmitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Spawn Area ähnelt.
        /// </summary>
        public static string PropDisp_SpawnArea {
            get {
                return ResourceManager.GetString("PropDisp_SpawnArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Spawn Direction ähnelt.
        /// </summary>
        public static string PropDisp_SpawnDirection {
            get {
                return ResourceManager.GetString("PropDisp_SpawnDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite ähnelt.
        /// </summary>
        public static string PropDisp_Sprite {
            get {
                return ResourceManager.GetString("PropDisp_Sprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite Off ähnelt.
        /// </summary>
        public static string PropDisp_SpriteOff {
            get {
                return ResourceManager.GetString("PropDisp_SpriteOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite On ähnelt.
        /// </summary>
        public static string PropDisp_SpriteOn {
            get {
                return ResourceManager.GetString("PropDisp_SpriteOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Switch Event ähnelt.
        /// </summary>
        public static string PropDisp_SwitchEvent {
            get {
                return ResourceManager.GetString("PropDisp_SwitchEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Template ähnelt.
        /// </summary>
        public static string PropDisp_TemplateName {
            get {
                return ResourceManager.GetString("PropDisp_TemplateName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text Resource Id ähnelt.
        /// </summary>
        public static string PropDisp_TextResourceId {
            get {
                return ResourceManager.GetString("PropDisp_TextResourceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tile Distance ähnelt.
        /// </summary>
        public static string PropDisp_TileDistance {
            get {
                return ResourceManager.GetString("PropDisp_TileDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Trigger Period ähnelt.
        /// </summary>
        public static string PropDisp_TriggerPeriod {
            get {
                return ResourceManager.GetString("PropDisp_TriggerPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type Name ähnelt.
        /// </summary>
        public static string PropDisp_TypeName {
            get {
                return ResourceManager.GetString("PropDisp_TypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not Unlocked Event ähnelt.
        /// </summary>
        public static string PropDisp_UnlockableDoor_NotUnlockedEvent {
            get {
                return ResourceManager.GetString("PropDisp_UnlockableDoor_NotUnlockedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Key ähnelt.
        /// </summary>
        public static string PropDisp_UnlockableDoor_RequiredKeyItemName {
            get {
                return ResourceManager.GetString("PropDisp_UnlockableDoor_RequiredKeyItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unlocked Event ähnelt.
        /// </summary>
        public static string PropDisp_UnlockableDoor_UnlockedEvent {
            get {
                return ResourceManager.GetString("PropDisp_UnlockableDoor_UnlockedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use Area ähnelt.
        /// </summary>
        public static string PropDisp_UseArea {
            get {
                return ResourceManager.GetString("PropDisp_UseArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use Template ähnelt.
        /// </summary>
        public static string PropDisp_UseTemplate {
            get {
                return ResourceManager.GetString("PropDisp_UseTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Volumne ähnelt.
        /// </summary>
        public static string PropDisp_Volumne {
            get {
                return ResourceManager.GetString("PropDisp_Volumne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quest Name ähnelt.
        /// </summary>
        public static string PropDisp_WantedSignPost_QuestName {
            get {
                return ResourceManager.GetString("PropDisp_WantedSignPost_QuestName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Waypoint Description ähnelt.
        /// </summary>
        public static string PropDisp_WaypointDescription {
            get {
                return ResourceManager.GetString("PropDisp_WaypointDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove the selected Layer &apos;{0}&apos; of Floor &apos;{1}&apos;? This can&apos;t be undone. ähnelt.
        /// </summary>
        public static string Qeestion_ReallyRemoveLayerXOfFloorY {
            get {
                return ResourceManager.GetString("Qeestion_ReallyRemoveLayerXOfFloorY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to fill the Layer &apos;{0}&apos; of Floor &apos;{1}&apos; with the &apos;{2}&apos; Sprite (index=&apos;{3}&apos;). This can&apos;t be undone. ähnelt.
        /// </summary>
        public static string Question_ReallyFillLayerXOfFloorYWithSpriteZIndexW {
            get {
                return ResourceManager.GetString("Question_ReallyFillLayerXOfFloorYWithSpriteZIndexW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove the floor &apos;{0}&apos; from the tile map?
        ///This can&apos;t be undone. ähnelt.
        /// </summary>
        public static string Question_ReallyRemoveFloorX {
            get {
                return ResourceManager.GetString("Question_ReallyRemoveFloorX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove the selected event trigger &apos;{0}&apos;? ähnelt.
        /// </summary>
        public static string Question_ReallyRemoveSelectedEventTriggerX {
            get {
                return ResourceManager.GetString("Question_ReallyRemoveSelectedEventTriggerX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove the selected event &apos;{0}&apos;? ähnelt.
        /// </summary>
        public static string Question_ReallyRemoveSelectedEventX {
            get {
                return ResourceManager.GetString("Question_ReallyRemoveSelectedEventX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove the selected object &apos;{0}&apos;? ähnelt.
        /// </summary>
        public static string Question_ReallyRemoveSelectedObjectX {
            get {
                return ResourceManager.GetString("Question_ReallyRemoveSelectedObjectX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to reset the selected Path &apos;{0}&apos;? ähnelt.
        /// </summary>
        public static string Question_ReallyResetSelectedPathX {
            get {
                return ResourceManager.GetString("Question_ReallyResetSelectedPathX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you wish to save the currently open Scene? ähnelt.
        /// </summary>
        public static string Question_SaveTheOpenScene {
            get {
                return ResourceManager.GetString("Question_SaveTheOpenScene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Event ähnelt.
        /// </summary>
        public static string TabHeader_Event {
            get {
                return ResourceManager.GetString("TabHeader_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die General ähnelt.
        /// </summary>
        public static string TabHeader_General {
            get {
                return ResourceManager.GetString("TabHeader_General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Object ähnelt.
        /// </summary>
        public static string TabHeader_Object {
            get {
                return ResourceManager.GetString("TabHeader_Object", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Story ähnelt.
        /// </summary>
        public static string TabHeader_Story {
            get {
                return ResourceManager.GetString("TabHeader_Story", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tile ähnelt.
        /// </summary>
        public static string TabHeader_Tile {
            get {
                return ResourceManager.GetString("TabHeader_Tile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Waypoint ähnelt.
        /// </summary>
        public static string TabHeader_Waypoint {
            get {
                return ResourceManager.GetString("TabHeader_Waypoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Light Off ähnelt.
        /// </summary>
        public static string Text_LightOff {
            get {
                return ResourceManager.GetString("Text_LightOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Light On ähnelt.
        /// </summary>
        public static string Text_LightOn {
            get {
                return ResourceManager.GetString("Text_LightOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The AmbientColor setting has only effect in Indoor-Scenes. ähnelt.
        /// </summary>
        public static string ToolTip_AmbientColor {
            get {
                return ResourceManager.GetString("ToolTip_AmbientColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The music that is played in the background of the Scene. The current track is selected randomly. ähnelt.
        /// </summary>
        public static string ToolTip_BackgroundMusic {
            get {
                return ResourceManager.GetString("ToolTip_BackgroundMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fills the currently selected Layer with the currently selected Sprite. ähnelt.
        /// </summary>
        public static string ToolTip_FillLayer {
            get {
                return ResourceManager.GetString("ToolTip_FillLayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the currently selected Layer. This field is optional. ähnelt.
        /// </summary>
        public static string ToolTip_LayerName {
            get {
                return ResourceManager.GetString("ToolTip_LayerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The SpriteSheet is responsible for converting the data of the Layer into actual Sprites.
        ///This field must be set. ähnelt.
        /// </summary>
        public static string ToolTip_LayerSpriteSheet {
            get {
                return ResourceManager.GetString("ToolTip_LayerSpriteSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This field indicates whether the currently selected Layer is visible. ähnelt.
        /// </summary>
        public static string ToolTip_LayerVisability {
            get {
                return ResourceManager.GetString("ToolTip_LayerVisability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the scene. The scene is saved under its name. ähnelt.
        /// </summary>
        public static string ToolTip_SceneName {
            get {
                return ResourceManager.GetString("ToolTip_SceneName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The type of a scene has various effects.
        ///Outdoor-Scenes have a Day/Night - Cycle and Weather.
        ///Indoor-Scenes use the AmbientColor setting and show no Weather. ähnelt.
        /// </summary>
        public static string ToolTip_SceneType {
            get {
                return ResourceManager.GetString("ToolTip_SceneType", resourceCulture);
            }
        }
    }
}
