//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zelda.ItemCreator.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Zelda.ItemCreator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string ButtonText_Cancel {
            get {
                return ResourceManager.GetString("ButtonText_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die OK ähnelt.
        /// </summary>
        public static string ButtonText_OK {
            get {
                return ResourceManager.GetString("ButtonText_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Selection Dialog ähnelt.
        /// </summary>
        public static string DialogTitle_Selection {
            get {
                return ResourceManager.GetString("DialogTitle_Selection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item resources (*.zitm)|*.zitm|Set resources (*.zset)|*.zset ähnelt.
        /// </summary>
        public static string Filter_Item {
            get {
                return ResourceManager.GetString("Filter_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite - binary resources (*.xnb)|*.xnb ähnelt.
        /// </summary>
        public static string Filter_Sprite {
            get {
                return ResourceManager.GetString("Filter_Sprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The item &apos;{0}&apos; has been saved successfully. ähnelt.
        /// </summary>
        public static string Info_ItemXSavedSuccessfully {
            get {
                return ResourceManager.GetString("Info_ItemXSavedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resaved all items. ähnelt.
        /// </summary>
        public static string Info_ResavedAllItems {
            get {
                return ResourceManager.GetString("Info_ResavedAllItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exit ähnelt.
        /// </summary>
        public static string MenuHeader_Exit {
            get {
                return ResourceManager.GetString("MenuHeader_Exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die List Drop Locations ähnelt.
        /// </summary>
        public static string MenuHeader_ListDropLocations {
            get {
                return ResourceManager.GetString("MenuHeader_ListDropLocations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Modify Item Cost ähnelt.
        /// </summary>
        public static string MenuHeader_ModifyItemCost {
            get {
                return ResourceManager.GetString("MenuHeader_ModifyItemCost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New ähnelt.
        /// </summary>
        public static string MenuHeader_New {
            get {
                return ResourceManager.GetString("MenuHeader_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Equipment ähnelt.
        /// </summary>
        public static string MenuHeader_NewEquipment {
            get {
                return ResourceManager.GetString("MenuHeader_NewEquipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Gem ähnelt.
        /// </summary>
        public static string MenuHeader_NewGem {
            get {
                return ResourceManager.GetString("MenuHeader_NewGem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item ähnelt.
        /// </summary>
        public static string MenuHeader_NewItem {
            get {
                return ResourceManager.GetString("MenuHeader_NewItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set ähnelt.
        /// </summary>
        public static string MenuHeader_NewSet {
            get {
                return ResourceManager.GetString("MenuHeader_NewSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Weapon ähnelt.
        /// </summary>
        public static string MenuHeader_NewWeapon {
            get {
                return ResourceManager.GetString("MenuHeader_NewWeapon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open ähnelt.
        /// </summary>
        public static string MenuHeader_Open {
            get {
                return ResourceManager.GetString("MenuHeader_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resave All ähnelt.
        /// </summary>
        public static string MenuHeader_ResaveAll {
            get {
                return ResourceManager.GetString("MenuHeader_ResaveAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string MenuHeader_Save {
            get {
                return ResourceManager.GetString("MenuHeader_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Show Gems ähnelt.
        /// </summary>
        public static string MenuHeader_ShowGems {
            get {
                return ResourceManager.GetString("MenuHeader_ShowGems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tools ähnelt.
        /// </summary>
        public static string MenuHeader_Tools {
            get {
                return ResourceManager.GetString("MenuHeader_Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Equipment ähnelt.
        /// </summary>
        public static string PropCate_Equipment {
            get {
                return ResourceManager.GetString("PropCate_Equipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Equipment - Sockets ähnelt.
        /// </summary>
        public static string PropCate_EquipmentSockets {
            get {
                return ResourceManager.GetString("PropCate_EquipmentSockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Equipment - Stats ähnelt.
        /// </summary>
        public static string PropCate_EquipmentStats {
            get {
                return ResourceManager.GetString("PropCate_EquipmentStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Gem ähnelt.
        /// </summary>
        public static string PropCate_Gem {
            get {
                return ResourceManager.GetString("PropCate_Gem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item ähnelt.
        /// </summary>
        public static string PropCate_Item {
            get {
                return ResourceManager.GetString("PropCate_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Equipment - Requirements ähnelt.
        /// </summary>
        public static string PropCate_Requirements {
            get {
                return ResourceManager.GetString("PropCate_Requirements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set ähnelt.
        /// </summary>
        public static string PropCate_Set {
            get {
                return ResourceManager.GetString("PropCate_Set", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Weapon ähnelt.
        /// </summary>
        public static string PropCate_Weapon {
            get {
                return ResourceManager.GetString("PropCate_Weapon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The additional effects the item provides when it gets equipped. ähnelt.
        /// </summary>
        public static string PropDesc_AdditionalEffects {
            get {
                return ResourceManager.GetString("PropDesc_AdditionalEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the item provides any additional effects when it gets equipped. ähnelt.
        /// </summary>
        public static string PropDesc_AdditionalEffectsToggle {
            get {
                return ResourceManager.GetString("PropDesc_AdditionalEffectsToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Agility increases Chance To Dodge, Melee and Ranged Attack Speed and to a small part Armor. ähnelt.
        /// </summary>
        public static string PropDesc_Agility {
            get {
                return ResourceManager.GetString("PropDesc_Agility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The item affixes this item is allowed to be &apos;enhanced&apos; with.
        ///Example Prefix: &apos;Sturdy&apos;.
        ///Example Suffix: &apos;of the Sorcery&apos;. ähnelt.
        /// </summary>
        public static string PropDesc_AllowedAffixes {
            get {
                return ResourceManager.GetString("PropDesc_AllowedAffixes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the sprite group that holds the animations shown in-game on the character. ähnelt.
        /// </summary>
        public static string PropDesc_AnimationSpriteGroup {
            get {
                return ResourceManager.GetString("PropDesc_AnimationSpriteGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The armor the item provides. Armor mitigates physical damage. ähnelt.
        /// </summary>
        public static string PropDesc_Armor {
            get {
                return ResourceManager.GetString("PropDesc_Armor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of mitigation the armor of the item provides against physical damage in %. (against an enemy that has the same level as the item) ähnelt.
        /// </summary>
        public static string PropDesc_ArmorMitigation {
            get {
                return ResourceManager.GetString("PropDesc_ArmorMitigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The time between two swings/uses of the weapon. Attack Speed is improved by agility. ähnelt.
        /// </summary>
        public static string PropDesc_AttackSpeed {
            get {
                return ResourceManager.GetString("PropDesc_AttackSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The damage the weapon provides in average. ähnelt.
        /// </summary>
        public static string PropDesc_AverageDamage {
            get {
                return ResourceManager.GetString("PropDesc_AverageDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum damage the weapon provides. ähnelt.
        /// </summary>
        public static string PropDesc_DamageMaximum {
            get {
                return ResourceManager.GetString("PropDesc_DamageMaximum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The minimum damage the weapon provides. ähnelt.
        /// </summary>
        public static string PropDesc_DamageMinimum {
            get {
                return ResourceManager.GetString("PropDesc_DamageMinimum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The damage per second (DPS) the weapon provides in average. ähnelt.
        /// </summary>
        public static string PropDesc_DamagePerSecond {
            get {
                return ResourceManager.GetString("PropDesc_DamagePerSecond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The description of the item. ähnelt.
        /// </summary>
        public static string PropDesc_Description {
            get {
                return ResourceManager.GetString("PropDesc_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dexterity increases Ranged Attack Power (RAP), the change to hit (and not miss an attack), to a small part also Melee Attack Power and reduces the cast-time of spell. ähnelt.
        /// </summary>
        public static string PropDesc_Dexterity {
            get {
                return ResourceManager.GetString("PropDesc_Dexterity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States an additional requirement that when not fulfilled won&apos;t allow the Item to be dropped. ähnelt.
        /// </summary>
        public static string PropDesc_DropRequirement {
            get {
                return ResourceManager.GetString("PropDesc_DropRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The color of the gem. To receive the socket bonus of an item with sockets all sockets must have gems with the same color as the corresponding sockets. ähnelt.
        /// </summary>
        public static string PropDesc_GemColor {
            get {
                return ResourceManager.GetString("PropDesc_GemColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The effects the gem provides when socketed into an equipment. ähnelt.
        /// </summary>
        public static string PropDesc_GemEffects {
            get {
                return ResourceManager.GetString("PropDesc_GemEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the equipment contains any sockets. ähnelt.
        /// </summary>
        public static string PropDesc_HasSockets {
            get {
                return ResourceManager.GetString("PropDesc_HasSockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of tiles the item takes up in the inventory - horizontally. ähnelt.
        /// </summary>
        public static string PropDesc_HeightInInventory {
            get {
                return ResourceManager.GetString("PropDesc_HeightInInventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The color the weapon is tinted in in-game on the character. ähnelt.
        /// </summary>
        public static string PropDesc_IngameColor {
            get {
                return ResourceManager.GetString("PropDesc_IngameColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Intelligence increases Magical Attack Power (MagAP), the amount of Mana, and Mana Regeneration. ähnelt.
        /// </summary>
        public static string PropDesc_Intelligence {
            get {
                return ResourceManager.GetString("PropDesc_Intelligence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The ItemPoints are calculated by taking into account ItemLevel, ItemQuality and EquipmentSlot. Each investment into an stat or bonus takes up Item Points. ähnelt.
        /// </summary>
        public static string PropDesc_ItemPoints {
            get {
                return ResourceManager.GetString("PropDesc_ItemPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The level of the item. The amount of &apos;Item Points&apos; an item can use depends on the item&apos;s level, quality/rarity and the slot the item may be equipped in. ähnelt.
        /// </summary>
        public static string PropDesc_Level {
            get {
                return ResourceManager.GetString("PropDesc_Level", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The localized description (for the current locale) of the item. ähnelt.
        /// </summary>
        public static string PropDesc_LocalizedDescription {
            get {
                return ResourceManager.GetString("PropDesc_LocalizedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The localized name (for the current locale) of the item. ähnelt.
        /// </summary>
        public static string PropDesc_LocalizedName {
            get {
                return ResourceManager.GetString("PropDesc_LocalizedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Luck increases the chance to get a Critical Attack and the chance to find rare items. ähnelt.
        /// </summary>
        public static string PropDesc_Luck {
            get {
                return ResourceManager.GetString("PropDesc_Luck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the item. Items are saved under their name. ähnelt.
        /// </summary>
        public static string PropDesc_Name {
            get {
                return ResourceManager.GetString("PropDesc_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The effect that is triggered when the player uses the item. ähnelt.
        /// </summary>
        public static string PropDesc_OnUseEffect {
            get {
                return ResourceManager.GetString("PropDesc_OnUseEffect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The quality of the item. The amount of &apos;Item Points&apos; an item can use depends on the item&apos;s level, quality/rarity and the slot the item may be equipped in. ähnelt.
        /// </summary>
        public static string PropDesc_Quality {
            get {
                return ResourceManager.GetString("PropDesc_Quality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The names of the recipes that use the item as a reagent. ähnelt.
        /// </summary>
        public static string PropDesc_Recipes {
            get {
                return ResourceManager.GetString("PropDesc_Recipes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of agility the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredAgility {
            get {
                return ResourceManager.GetString("PropDesc_RequiredAgility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of dexterity the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredDexterity {
            get {
                return ResourceManager.GetString("PropDesc_RequiredDexterity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of intelligence the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredIntelligence {
            get {
                return ResourceManager.GetString("PropDesc_RequiredIntelligence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The level the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredLevel {
            get {
                return ResourceManager.GetString("PropDesc_RequiredLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of luck the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredLuck {
            get {
                return ResourceManager.GetString("PropDesc_RequiredLuck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of strength the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredStrength {
            get {
                return ResourceManager.GetString("PropDesc_RequiredStrength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The amount of vitality the item requires before it can be equipped. ähnelt.
        /// </summary>
        public static string PropDesc_RequiredVitality {
            get {
                return ResourceManager.GetString("PropDesc_RequiredVitality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of rubies the items is worth when sold. ähnelt.
        /// </summary>
        public static string PropDesc_RubiesWorth {
            get {
                return ResourceManager.GetString("PropDesc_RubiesWorth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The set this equipment is part of. ähnelt.
        /// </summary>
        public static string PropDesc_Set {
            get {
                return ResourceManager.GetString("PropDesc_Set", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The bonus the set provides when the player has equipped all items of the set. ähnelt.
        /// </summary>
        public static string PropDesc_SetBonus {
            get {
                return ResourceManager.GetString("PropDesc_SetBonus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The items the set consists of. ähnelt.
        /// </summary>
        public static string PropDesc_SetItems {
            get {
                return ResourceManager.GetString("PropDesc_SetItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The slot the equipment goes in. The amount of &apos;Item Points&apos; an item can use depends on the item&apos;s level, quality/rarity and the slot the item may be equipped in. ähnelt.
        /// </summary>
        public static string PropDesc_Slot {
            get {
                return ResourceManager.GetString("PropDesc_Slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The additional bonus that is applied when all sockets of the equipment are socketed with color-matching gems. ähnelt.
        /// </summary>
        public static string PropDesc_SocketBonus {
            get {
                return ResourceManager.GetString("PropDesc_SocketBonus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sockets of the equipment. Sockets allow customization of an item by placing gems into the sockets. ähnelt.
        /// </summary>
        public static string PropDesc_Sockets {
            get {
                return ResourceManager.GetString("PropDesc_Sockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the sound resource that is played when the Player has picked up the item. ähnelt.
        /// </summary>
        public static string PropDesc_SoundOnPickupName {
            get {
                return ResourceManager.GetString("PropDesc_SoundOnPickupName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The volume of the sound on pickup. [0..1] with 0=silent and 1=normal ähnelt.
        /// </summary>
        public static string PropDesc_SoundOnPickupVolume {
            get {
                return ResourceManager.GetString("PropDesc_SoundOnPickupVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The special type associated with this Item. ähnelt.
        /// </summary>
        public static string PropDesc_SpecialType {
            get {
                return ResourceManager.GetString("PropDesc_SpecialType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sprite that is used to visualize the item in the world. ähnelt.
        /// </summary>
        public static string PropDesc_Sprite {
            get {
                return ResourceManager.GetString("PropDesc_Sprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The color the sprite of the item is tinted in. ähnelt.
        /// </summary>
        public static string PropDesc_SpriteColor {
            get {
                return ResourceManager.GetString("PropDesc_SpriteColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of items of this type that can be placed on-top of each other (for example in the Inventory). ähnelt.
        /// </summary>
        public static string PropDesc_StackSize {
            get {
                return ResourceManager.GetString("PropDesc_StackSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Strength increases Melee Attack Power (MAP), and to a small amount how much damage may be blocked by the shield. ähnelt.
        /// </summary>
        public static string PropDesc_Strength {
            get {
                return ResourceManager.GetString("PropDesc_Strength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vitality increases Life Points, the Life Point Regeneration and also increases the chance to resist (bad) status changing effects. ähnelt.
        /// </summary>
        public static string PropDesc_Vitality {
            get {
                return ResourceManager.GetString("PropDesc_Vitality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The type of the weapon. ähnelt.
        /// </summary>
        public static string PropDesc_WeaponType {
            get {
                return ResourceManager.GetString("PropDesc_WeaponType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The number of tiles the item takes up in the inventory - vertically. ähnelt.
        /// </summary>
        public static string PropDesc_WidthInInventory {
            get {
                return ResourceManager.GetString("PropDesc_WidthInInventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Additional Effects ähnelt.
        /// </summary>
        public static string PropDisp_AdditionalEffects {
            get {
                return ResourceManager.GetString("PropDisp_AdditionalEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Additional Effects Toggle ähnelt.
        /// </summary>
        public static string PropDisp_AdditionalEffectsToggle {
            get {
                return ResourceManager.GetString("PropDisp_AdditionalEffectsToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Agility ähnelt.
        /// </summary>
        public static string PropDisp_Agility {
            get {
                return ResourceManager.GetString("PropDisp_Agility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Allowed Affixes ähnelt.
        /// </summary>
        public static string PropDisp_AllowedAffixes {
            get {
                return ResourceManager.GetString("PropDisp_AllowedAffixes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Animation Sprite Group ähnelt.
        /// </summary>
        public static string PropDisp_AnimationSpriteGroup {
            get {
                return ResourceManager.GetString("PropDisp_AnimationSpriteGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Armor ähnelt.
        /// </summary>
        public static string PropDisp_Armor {
            get {
                return ResourceManager.GetString("PropDisp_Armor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Armor Mitigation ähnelt.
        /// </summary>
        public static string PropDisp_ArmorMitigation {
            get {
                return ResourceManager.GetString("PropDisp_ArmorMitigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attack Speed ähnelt.
        /// </summary>
        public static string PropDisp_AttackSpeed {
            get {
                return ResourceManager.GetString("PropDisp_AttackSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Average Damage ähnelt.
        /// </summary>
        public static string PropDisp_AverageDamage {
            get {
                return ResourceManager.GetString("PropDisp_AverageDamage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Damage Maximum ähnelt.
        /// </summary>
        public static string PropDisp_DamageMaximum {
            get {
                return ResourceManager.GetString("PropDisp_DamageMaximum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Damage Minimum ähnelt.
        /// </summary>
        public static string PropDisp_DamageMinimum {
            get {
                return ResourceManager.GetString("PropDisp_DamageMinimum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Damage Per Second ähnelt.
        /// </summary>
        public static string PropDisp_DamagePerSecond {
            get {
                return ResourceManager.GetString("PropDisp_DamagePerSecond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description ähnelt.
        /// </summary>
        public static string PropDisp_Description {
            get {
                return ResourceManager.GetString("PropDisp_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dexterity ähnelt.
        /// </summary>
        public static string PropDisp_Dexterity {
            get {
                return ResourceManager.GetString("PropDisp_Dexterity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Drop Requirement ähnelt.
        /// </summary>
        public static string PropDisp_DropRequirement {
            get {
                return ResourceManager.GetString("PropDisp_DropRequirement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Color ähnelt.
        /// </summary>
        public static string PropDisp_GemColor {
            get {
                return ResourceManager.GetString("PropDisp_GemColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Effects ähnelt.
        /// </summary>
        public static string PropDisp_GemEffects {
            get {
                return ResourceManager.GetString("PropDisp_GemEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Has Sockets ähnelt.
        /// </summary>
        public static string PropDisp_HasSockets {
            get {
                return ResourceManager.GetString("PropDisp_HasSockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inventory Height ähnelt.
        /// </summary>
        public static string PropDisp_HeightInInventory {
            get {
                return ResourceManager.GetString("PropDisp_HeightInInventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ingame Color ähnelt.
        /// </summary>
        public static string PropDisp_IngameColor {
            get {
                return ResourceManager.GetString("PropDisp_IngameColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Intelligence ähnelt.
        /// </summary>
        public static string PropDisp_Intelligence {
            get {
                return ResourceManager.GetString("PropDisp_Intelligence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item Points ähnelt.
        /// </summary>
        public static string PropDisp_ItemPoints {
            get {
                return ResourceManager.GetString("PropDisp_ItemPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Level ähnelt.
        /// </summary>
        public static string PropDisp_Level {
            get {
                return ResourceManager.GetString("PropDisp_Level", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description (localized) ähnelt.
        /// </summary>
        public static string PropDisp_LocalizedDescription {
            get {
                return ResourceManager.GetString("PropDisp_LocalizedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name (localized) ähnelt.
        /// </summary>
        public static string PropDisp_LocalizedName {
            get {
                return ResourceManager.GetString("PropDisp_LocalizedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Luck ähnelt.
        /// </summary>
        public static string PropDisp_Luck {
            get {
                return ResourceManager.GetString("PropDisp_Luck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name ähnelt.
        /// </summary>
        public static string PropDisp_Name {
            get {
                return ResourceManager.GetString("PropDisp_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die On Use Effect ähnelt.
        /// </summary>
        public static string PropDisp_OnUseEffect {
            get {
                return ResourceManager.GetString("PropDisp_OnUseEffect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quality ähnelt.
        /// </summary>
        public static string PropDisp_Quality {
            get {
                return ResourceManager.GetString("PropDisp_Quality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Recipes ähnelt.
        /// </summary>
        public static string PropDisp_Recipes {
            get {
                return ResourceManager.GetString("PropDisp_Recipes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Agility ähnelt.
        /// </summary>
        public static string PropDisp_RequiredAgility {
            get {
                return ResourceManager.GetString("PropDisp_RequiredAgility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Dexterity ähnelt.
        /// </summary>
        public static string PropDisp_RequiredDexterity {
            get {
                return ResourceManager.GetString("PropDisp_RequiredDexterity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Intelligence ähnelt.
        /// </summary>
        public static string PropDisp_RequiredIntelligence {
            get {
                return ResourceManager.GetString("PropDisp_RequiredIntelligence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Level ähnelt.
        /// </summary>
        public static string PropDisp_RequiredLevel {
            get {
                return ResourceManager.GetString("PropDisp_RequiredLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Luck ähnelt.
        /// </summary>
        public static string PropDisp_RequiredLuck {
            get {
                return ResourceManager.GetString("PropDisp_RequiredLuck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Strength ähnelt.
        /// </summary>
        public static string PropDisp_RequiredStrength {
            get {
                return ResourceManager.GetString("PropDisp_RequiredStrength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Required Vitality ähnelt.
        /// </summary>
        public static string PropDisp_RequiredVitality {
            get {
                return ResourceManager.GetString("PropDisp_RequiredVitality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rubies Worth ähnelt.
        /// </summary>
        public static string PropDisp_RubiesWorth {
            get {
                return ResourceManager.GetString("PropDisp_RubiesWorth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set ähnelt.
        /// </summary>
        public static string PropDisp_Set {
            get {
                return ResourceManager.GetString("PropDisp_Set", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bonus ähnelt.
        /// </summary>
        public static string PropDisp_SetBonus {
            get {
                return ResourceManager.GetString("PropDisp_SetBonus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Items ähnelt.
        /// </summary>
        public static string PropDisp_SetItems {
            get {
                return ResourceManager.GetString("PropDisp_SetItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Slot ähnelt.
        /// </summary>
        public static string PropDisp_Slot {
            get {
                return ResourceManager.GetString("PropDisp_Slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bonus ähnelt.
        /// </summary>
        public static string PropDisp_SocketBonus {
            get {
                return ResourceManager.GetString("PropDisp_SocketBonus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sockets ähnelt.
        /// </summary>
        public static string PropDisp_Sockets {
            get {
                return ResourceManager.GetString("PropDisp_Sockets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound on pickup ähnelt.
        /// </summary>
        public static string PropDisp_SoundOnPickupName {
            get {
                return ResourceManager.GetString("PropDisp_SoundOnPickupName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound on pickup Volume ähnelt.
        /// </summary>
        public static string PropDisp_SoundOnPickupVolume {
            get {
                return ResourceManager.GetString("PropDisp_SoundOnPickupVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Special Type ähnelt.
        /// </summary>
        public static string PropDisp_SpecialType {
            get {
                return ResourceManager.GetString("PropDisp_SpecialType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite ähnelt.
        /// </summary>
        public static string PropDisp_Sprite {
            get {
                return ResourceManager.GetString("PropDisp_Sprite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sprite Color ähnelt.
        /// </summary>
        public static string PropDisp_SpriteColor {
            get {
                return ResourceManager.GetString("PropDisp_SpriteColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stack Size ähnelt.
        /// </summary>
        public static string PropDisp_StackSize {
            get {
                return ResourceManager.GetString("PropDisp_StackSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Strength ähnelt.
        /// </summary>
        public static string PropDisp_Strength {
            get {
                return ResourceManager.GetString("PropDisp_Strength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vitality ähnelt.
        /// </summary>
        public static string PropDisp_Vitality {
            get {
                return ResourceManager.GetString("PropDisp_Vitality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type ähnelt.
        /// </summary>
        public static string PropDisp_WeaponType {
            get {
                return ResourceManager.GetString("PropDisp_WeaponType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inventory Width ähnelt.
        /// </summary>
        public static string PropDisp_WidthInInventory {
            get {
                return ResourceManager.GetString("PropDisp_WidthInInventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really wish to remove all existing sockets from the equipment? ähnelt.
        /// </summary>
        public static string Question_ReallyRemoveAllSocketsFromTheEquipment {
            get {
                return ResourceManager.GetString("Question_ReallyRemoveAllSocketsFromTheEquipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item Creator for TLoZ - Black Crown ähnelt.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
    }
}
