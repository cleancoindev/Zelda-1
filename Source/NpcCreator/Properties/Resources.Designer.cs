//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zelda.NpcCreator.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Zelda.NpcCreator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string ButtonText_Cancel {
            get {
                return ResourceManager.GetString("ButtonText_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die OK ähnelt.
        /// </summary>
        public static string ButtonText_OK {
            get {
                return ResourceManager.GetString("ButtonText_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chance To Drop ähnelt.
        /// </summary>
        public static string DataGridColumn_ChanceToDrop {
            get {
                return ResourceManager.GetString("DataGridColumn_ChanceToDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chance To Drop in % ähnelt.
        /// </summary>
        public static string DataGridColumn_ChanceToDropInPercent {
            get {
                return ResourceManager.GetString("DataGridColumn_ChanceToDropInPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Item Name ähnelt.
        /// </summary>
        public static string DataGridColumn_ItemName {
            get {
                return ResourceManager.GetString("DataGridColumn_ItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die MF Works ähnelt.
        /// </summary>
        public static string DataGridColumn_MagicFindWorks {
            get {
                return ResourceManager.GetString("DataGridColumn_MagicFindWorks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Draw Strategy to use. ähnelt.
        /// </summary>
        public static string DialogTitle_DrawStrategySelection {
            get {
                return ResourceManager.GetString("DialogTitle_DrawStrategySelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Entity Behaviour to use. ähnelt.
        /// </summary>
        public static string DialogTitle_EntityBehaviourSelection {
            get {
                return ResourceManager.GetString("DialogTitle_EntityBehaviourSelection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the NPC definition file to open. ähnelt.
        /// </summary>
        public static string DialogTitle_SelectNpcFile {
            get {
                return ResourceManager.GetString("DialogTitle_SelectNpcFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error! The LootTable contains an invalid item &apos;{0}&apos;. ähnelt.
        /// </summary>
        public static string Error_TheLootTableContainsInvalidItemX {
            get {
                return ResourceManager.GetString("Error_TheLootTableContainsInvalidItemX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the NPC must be set. ähnelt.
        /// </summary>
        public static string Info_NameMustBeSet {
            get {
                return ResourceManager.GetString("Info_NameMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ~ No Behaviour Set ~ ähnelt.
        /// </summary>
        public static string Info_NoBehaviourSet {
            get {
                return ResourceManager.GetString("Info_NoBehaviourSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All entities have been resaved. ähnelt.
        /// </summary>
        public static string Info_ResavedAllEntities {
            get {
                return ResourceManager.GetString("Info_ResavedAllEntities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Saving was successful. ähnelt.
        /// </summary>
        public static string Info_SaveSuccessful {
            get {
                return ResourceManager.GetString("Info_SaveSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exit ähnelt.
        /// </summary>
        public static string MenuHeader_Exit {
            get {
                return ResourceManager.GetString("MenuHeader_Exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New ähnelt.
        /// </summary>
        public static string MenuHeader_New {
            get {
                return ResourceManager.GetString("MenuHeader_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enemy ähnelt.
        /// </summary>
        public static string MenuHeader_NewEnemy {
            get {
                return ResourceManager.GetString("MenuHeader_NewEnemy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Merchant ähnelt.
        /// </summary>
        public static string MenuHeader_NewMerchant {
            get {
                return ResourceManager.GetString("MenuHeader_NewMerchant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non Player Character (friendly) ähnelt.
        /// </summary>
        public static string MenuHeader_NewNpc {
            get {
                return ResourceManager.GetString("MenuHeader_NewNpc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plant ähnelt.
        /// </summary>
        public static string MenuHeader_NewPlant {
            get {
                return ResourceManager.GetString("MenuHeader_NewPlant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open ähnelt.
        /// </summary>
        public static string MenuHeader_Open {
            get {
                return ResourceManager.GetString("MenuHeader_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resave All ähnelt.
        /// </summary>
        public static string MenuHeader_ResaveAll {
            get {
                return ResourceManager.GetString("MenuHeader_ResaveAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string MenuHeader_Save {
            get {
                return ResourceManager.GetString("MenuHeader_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tools ähnelt.
        /// </summary>
        public static string MenuHeader_Tools {
            get {
                return ResourceManager.GetString("MenuHeader_Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collision ähnelt.
        /// </summary>
        public static string PropCate_Collision {
            get {
                return ResourceManager.GetString("PropCate_Collision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Identification ähnelt.
        /// </summary>
        public static string PropCate_Identification {
            get {
                return ResourceManager.GetString("PropCate_Identification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Merchant ähnelt.
        /// </summary>
        public static string PropCate_Merchant {
            get {
                return ResourceManager.GetString("PropCate_Merchant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Movement ähnelt.
        /// </summary>
        public static string PropCate_Movement {
            get {
                return ResourceManager.GetString("PropCate_Movement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quests ähnelt.
        /// </summary>
        public static string PropCate_Quests {
            get {
                return ResourceManager.GetString("PropCate_Quests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Settings ähnelt.
        /// </summary>
        public static string PropCate_Settings {
            get {
                return ResourceManager.GetString("PropCate_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Status ähnelt.
        /// </summary>
        public static string PropCate_Status {
            get {
                return ResourceManager.GetString("PropCate_Status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Talk ähnelt.
        /// </summary>
        public static string PropCate_Talkable {
            get {
                return ResourceManager.GetString("PropCate_Talkable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vision ähnelt.
        /// </summary>
        public static string PropCate_Vision {
            get {
                return ResourceManager.GetString("PropCate_Vision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States how the Enemy behaves towards the Player. ähnelt.
        /// </summary>
        public static string PropDesc_AggressionType {
            get {
                return ResourceManager.GetString("PropDesc_AggressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The base armor of the entity. Armor protects from physical damage. ähnelt.
        /// </summary>
        public static string PropDesc_Armor {
            get {
                return ResourceManager.GetString("PropDesc_Armor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The mitigation the enemy has against physical attacks. ähnelt.
        /// </summary>
        public static string PropDesc_ArmorMitigation {
            get {
                return ResourceManager.GetString("PropDesc_ArmorMitigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the Npc can be pushed around, by for example attacking. ähnelt.
        /// </summary>
        public static string PropDesc_CanBePushed {
            get {
                return ResourceManager.GetString("PropDesc_CanBePushed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the Npc can change from one Floor to another. ähnelt.
        /// </summary>
        public static string PropDesc_CanChangeFloor {
            get {
                return ResourceManager.GetString("PropDesc_CanChangeFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the entity can slide around the edges of a tile. ähnelt.
        /// </summary>
        public static string PropDesc_CanSlide {
            get {
                return ResourceManager.GetString("PropDesc_CanSlide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the Npc can swim in deep water. ähnelt.
        /// </summary>
        public static string PropDesc_CanSwim {
            get {
                return ResourceManager.GetString("PropDesc_CanSwim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the entity collides with the tile map. ähnelt.
        /// </summary>
        public static string PropDesc_CollidesWithMap {
            get {
                return ResourceManager.GetString("PropDesc_CollidesWithMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The offset from the position of the Npc to the start of the collision area. ähnelt.
        /// </summary>
        public static string PropDesc_CollisionOffset {
            get {
                return ResourceManager.GetString("PropDesc_CollisionOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The size of the collision area of the Npc. ähnelt.
        /// </summary>
        public static string PropDesc_CollisionSize {
            get {
                return ResourceManager.GetString("PropDesc_CollisionSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The color the cut animation of the Plant is tinted in. ähnelt.
        /// </summary>
        public static string PropDesc_CutEffectAnimationColor {
            get {
                return ResourceManager.GetString("PropDesc_CutEffectAnimationColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The settings of the IDrawDataAndStrategy. ähnelt.
        /// </summary>
        public static string PropDesc_DrawDataAndStrategySettings {
            get {
                return ResourceManager.GetString("PropDesc_DrawDataAndStrategySettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The set IDrawDataAndStrategy defines how the Entity is drawn. ähnelt.
        /// </summary>
        public static string PropDesc_DrawDataAndStrategyType {
            get {
                return ResourceManager.GetString("PropDesc_DrawDataAndStrategyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The set IEntityBehaviour defines how the Entity is controlled. ähnelt.
        /// </summary>
        public static string PropDesc_EntityBehaviour {
            get {
                return ResourceManager.GetString("PropDesc_EntityBehaviour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The settings of the IEntityBehaviour. ähnelt.
        /// </summary>
        public static string PropDesc_EntityBehaviourSettings {
            get {
                return ResourceManager.GetString("PropDesc_EntityBehaviourSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has exalted reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_ExaltedText {
            get {
                return ResourceManager.GetString("PropDesc_ExaltedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Exalted Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_ExaltedTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_ExaltedTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The in-game faction the entity is part of. ähnelt.
        /// </summary>
        public static string PropDesc_Faction {
            get {
                return ResourceManager.GetString("PropDesc_Faction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The range (in pixels) the Entity can feel other entities. ähnelt.
        /// </summary>
        public static string PropDesc_FeelingRange {
            get {
                return ResourceManager.GetString("PropDesc_FeelingRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States how the Entity is drawn relative to other Entities on the same Floor. ähnelt.
        /// </summary>
        public static string PropDesc_FloorRelativity {
            get {
                return ResourceManager.GetString("PropDesc_FloorRelativity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has friendly or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_FriendlyText {
            get {
                return ResourceManager.GetString("PropDesc_FriendlyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Friendly Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_FriendlyTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_FriendlyTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has hated or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_HatedText {
            get {
                return ResourceManager.GetString("PropDesc_HatedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Hated Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_HatedTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_HatedTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has honored or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_HonoredText {
            get {
                return ResourceManager.GetString("PropDesc_HonoredText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Honored Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_HonoredTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_HonoredTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has hostile or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_HostileText {
            get {
                return ResourceManager.GetString("PropDesc_HostileText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Hostile Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_HostileTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_HostileTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die States whether the Npc collides with the Scene and other objects. ähnelt.
        /// </summary>
        public static string PropDesc_IsSolid {
            get {
                return ResourceManager.GetString("PropDesc_IsSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The localized name of the entity. ähnelt.
        /// </summary>
        public static string PropDesc_LocalizedName {
            get {
                return ResourceManager.GetString("PropDesc_LocalizedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The speed the Npc moves by default; without any modifications. ähnelt.
        /// </summary>
        public static string PropDesc_MovementSpeed {
            get {
                return ResourceManager.GetString("PropDesc_MovementSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The unique name of the Npc. Npcs are saved under their name. ähnelt.
        /// </summary>
        public static string PropDesc_Name {
            get {
                return ResourceManager.GetString("PropDesc_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity choses a line to speak from. ähnelt.
        /// </summary>
        public static string PropDesc_NeutralText {
            get {
                return ResourceManager.GetString("PropDesc_NeutralText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Neutral Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_NeutralTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_NeutralTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name of the animation that is displayed once the Plant has been cut. ähnelt.
        /// </summary>
        public static string PropDesc_PlantCutEffectAnimationName {
            get {
                return ResourceManager.GetString("PropDesc_PlantCutEffectAnimationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The value all pushing forces applied to this Entity are multiplied by. ähnelt.
        /// </summary>
        public static string PropDesc_PushingForceModifier {
            get {
                return ResourceManager.GetString("PropDesc_PushingForceModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The names that uniquely identify the quests this entity may give to the player. ähnelt.
        /// </summary>
        public static string PropDesc_QuestNames {
            get {
                return ResourceManager.GetString("PropDesc_QuestNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The time in seconds it takes for the entity to respawn once killed. ähnelt.
        /// </summary>
        public static string PropDesc_RespawnTime {
            get {
                return ResourceManager.GetString("PropDesc_RespawnTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from.(only considered if the player has revered or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_ReveredText {
            get {
                return ResourceManager.GetString("PropDesc_ReveredText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Revered Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_ReveredTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_ReveredTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of items sold by the Merchant. ähnelt.
        /// </summary>
        public static string PropDesc_SellList {
            get {
                return ResourceManager.GetString("PropDesc_SellList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of text from which the talkable entity chooses a line to speak from. (only considered if the player has unfriendly or better reputation towards the npc&apos;s faction) ähnelt.
        /// </summary>
        public static string PropDesc_UnfriendlyText {
            get {
                return ResourceManager.GetString("PropDesc_UnfriendlyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Toggles the Unfriendly Text on/off. ähnelt.
        /// </summary>
        public static string PropDesc_UnfriendlyTextToggle {
            get {
                return ResourceManager.GetString("PropDesc_UnfriendlyTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The range (in pixels) the Entity can see other entities. ähnelt.
        /// </summary>
        public static string PropDesc_VisionRange {
            get {
                return ResourceManager.GetString("PropDesc_VisionRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Aggression Type ähnelt.
        /// </summary>
        public static string PropDisp_AggressionType {
            get {
                return ResourceManager.GetString("PropDisp_AggressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Armor ähnelt.
        /// </summary>
        public static string PropDisp_Armor {
            get {
                return ResourceManager.GetString("PropDisp_Armor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Armor Mitigation ähnelt.
        /// </summary>
        public static string PropDisp_ArmorMitigation {
            get {
                return ResourceManager.GetString("PropDisp_ArmorMitigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Pushable ähnelt.
        /// </summary>
        public static string PropDisp_CanBePushed {
            get {
                return ResourceManager.GetString("PropDisp_CanBePushed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can change Floor ähnelt.
        /// </summary>
        public static string PropDisp_CanChangeFloor {
            get {
                return ResourceManager.GetString("PropDisp_CanChangeFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can Slide ähnelt.
        /// </summary>
        public static string PropDisp_CanSlide {
            get {
                return ResourceManager.GetString("PropDisp_CanSlide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can Swim ähnelt.
        /// </summary>
        public static string PropDisp_CanSwim {
            get {
                return ResourceManager.GetString("PropDisp_CanSwim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collides With Map ähnelt.
        /// </summary>
        public static string PropDisp_CollidesWithMap {
            get {
                return ResourceManager.GetString("PropDisp_CollidesWithMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Offset ähnelt.
        /// </summary>
        public static string PropDisp_CollisionOffset {
            get {
                return ResourceManager.GetString("PropDisp_CollisionOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Size ähnelt.
        /// </summary>
        public static string PropDisp_CollisionSize {
            get {
                return ResourceManager.GetString("PropDisp_CollisionSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cut Effect Animation Color ähnelt.
        /// </summary>
        public static string PropDisp_CutEffectAnimationColor {
            get {
                return ResourceManager.GetString("PropDisp_CutEffectAnimationColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DrawDataAndStrategy Settings ähnelt.
        /// </summary>
        public static string PropDisp_DrawDataAndStrategySettings {
            get {
                return ResourceManager.GetString("PropDisp_DrawDataAndStrategySettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DrawDataAndStrategy ähnelt.
        /// </summary>
        public static string PropDisp_DrawDataAndStrategyType {
            get {
                return ResourceManager.GetString("PropDisp_DrawDataAndStrategyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Behaviour ähnelt.
        /// </summary>
        public static string PropDisp_EntityBehaviour {
            get {
                return ResourceManager.GetString("PropDisp_EntityBehaviour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Behaviour Settings ähnelt.
        /// </summary>
        public static string PropDisp_EntityBehaviourSettings {
            get {
                return ResourceManager.GetString("PropDisp_EntityBehaviourSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exalted Text ähnelt.
        /// </summary>
        public static string PropDisp_ExaltedText {
            get {
                return ResourceManager.GetString("PropDisp_ExaltedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exalted Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_ExaltedTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_ExaltedTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Faction ähnelt.
        /// </summary>
        public static string PropDisp_Faction {
            get {
                return ResourceManager.GetString("PropDisp_Faction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Feeling Range ähnelt.
        /// </summary>
        public static string PropDisp_FeelingRange {
            get {
                return ResourceManager.GetString("PropDisp_FeelingRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Floor Relativity ähnelt.
        /// </summary>
        public static string PropDisp_FloorRelativity {
            get {
                return ResourceManager.GetString("PropDisp_FloorRelativity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Friendly Text ähnelt.
        /// </summary>
        public static string PropDisp_FriendlyText {
            get {
                return ResourceManager.GetString("PropDisp_FriendlyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Friendly Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_FriendlyTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_FriendlyTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hated Text ähnelt.
        /// </summary>
        public static string PropDisp_HatedText {
            get {
                return ResourceManager.GetString("PropDisp_HatedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hated Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_HatedTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_HatedTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Honored Text ähnelt.
        /// </summary>
        public static string PropDisp_HonoredText {
            get {
                return ResourceManager.GetString("PropDisp_HonoredText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Honored Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_HonoredTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_HonoredTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hostile Text ähnelt.
        /// </summary>
        public static string PropDisp_HostileText {
            get {
                return ResourceManager.GetString("PropDisp_HostileText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hostile Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_HostileTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_HostileTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Is Solid ähnelt.
        /// </summary>
        public static string PropDisp_IsSolid {
            get {
                return ResourceManager.GetString("PropDisp_IsSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Localized Name ähnelt.
        /// </summary>
        public static string PropDisp_LocalizedName {
            get {
                return ResourceManager.GetString("PropDisp_LocalizedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Movement Speed ähnelt.
        /// </summary>
        public static string PropDisp_MovementSpeed {
            get {
                return ResourceManager.GetString("PropDisp_MovementSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name ähnelt.
        /// </summary>
        public static string PropDisp_Name {
            get {
                return ResourceManager.GetString("PropDisp_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Neutral Text ähnelt.
        /// </summary>
        public static string PropDisp_NeutralText {
            get {
                return ResourceManager.GetString("PropDisp_NeutralText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Neutral Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_NeutralTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_NeutralTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cut Effect Animation Name ähnelt.
        /// </summary>
        public static string PropDisp_PlantCutEffectAnimationName {
            get {
                return ResourceManager.GetString("PropDisp_PlantCutEffectAnimationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pushing-Force Modifier ähnelt.
        /// </summary>
        public static string PropDisp_PushingForceModifier {
            get {
                return ResourceManager.GetString("PropDisp_PushingForceModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quest Names ähnelt.
        /// </summary>
        public static string PropDisp_QuestNames {
            get {
                return ResourceManager.GetString("PropDisp_QuestNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Respawn Time ähnelt.
        /// </summary>
        public static string PropDisp_RespawnTime {
            get {
                return ResourceManager.GetString("PropDisp_RespawnTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Revered Text ähnelt.
        /// </summary>
        public static string PropDisp_ReveredText {
            get {
                return ResourceManager.GetString("PropDisp_ReveredText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Revered Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_ReveredTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_ReveredTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sell List ähnelt.
        /// </summary>
        public static string PropDisp_SellList {
            get {
                return ResourceManager.GetString("PropDisp_SellList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unfriendly Text ähnelt.
        /// </summary>
        public static string PropDisp_UnfriendlyText {
            get {
                return ResourceManager.GetString("PropDisp_UnfriendlyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unfriendly Text Toggle ähnelt.
        /// </summary>
        public static string PropDisp_UnfriendlyTextToggle {
            get {
                return ResourceManager.GetString("PropDisp_UnfriendlyTextToggle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vision Range ähnelt.
        /// </summary>
        public static string PropDisp_VisionRange {
            get {
                return ResourceManager.GetString("PropDisp_VisionRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die General Properties ähnelt.
        /// </summary>
        public static string TabHeader_GeneralProperties {
            get {
                return ResourceManager.GetString("TabHeader_GeneralProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Loot ähnelt.
        /// </summary>
        public static string TabHeader_Loot {
            get {
                return ResourceManager.GetString("TabHeader_Loot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Npc Creator for TLoZ - Black Crown ähnelt.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
    }
}
